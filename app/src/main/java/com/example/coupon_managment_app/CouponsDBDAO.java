package com.example.coupon_managment_app;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Date;


public class CouponsDBDAO implements CouponsDAO{

    static CouponExpirationDailyJob dailyJob ;
    private Db_Manager dbManager;
    private static CouponsDBDAO coupInstance;
    private ArrayList<Coupon> couponsList;



    // Private constructor to prevent direct instantiation
    private CouponsDBDAO(Context context)  {
        couponsList = new ArrayList<>();
        dbManager = Db_Manager.getInstance(context);
        // Load coupons from the database into the couponsList
        try {
            couponsList.addAll(getAllCoupons());
        } catch (CouponException e) {
            Toast.makeText(context, "error in creating couponsDao!", Toast.LENGTH_SHORT).show();
        }
    }

    // makaing a class singelton (always returning the same object)
    public static CouponsDBDAO getInstance(Context context)  {
        if(coupInstance == null) {
            dailyJob = new CouponExpirationDailyJob(context);
            coupInstance = new CouponsDBDAO(context);
            Thread thread = new Thread(dailyJob);
            thread.start(); // Starts the background thread
        }
        return coupInstance;
    }


    // a function Add a new coupon to the list and to the coupons table
    @Override
    public void addCoupon(Coupon coupon) throws CouponException {
        // Add the coupon to the ArrayList
        couponsList.add(coupon);

        try {
            // Add the coupon to the database
            SQLiteDatabase db = dbManager.getWritableDatabase();
            ContentValues values = new ContentValues();
            values.put(Db_Manager.getKeyCompanyIdFkColumn(), coupon.getCompanyId());
            values.put(Db_Manager.getKeyCategoryIdFkColumn(), coupon.getCategory().ordinal());
            values.put(Db_Manager.getCouponsTitleColumn(), coupon.getTitle());
            values.put(Db_Manager.getCouponsDescriptionColumn(), coupon.getDescription());
            values.put(Db_Manager.getCouponsStartDateColumn(), coupon.getStartDate().getTime());
            values.put(Db_Manager.getCouponsEndDateColumn(), coupon.getEndDate().getTime());
            values.put(Db_Manager.getCouponsAmountColumn(), coupon.getAmount());
            values.put(Db_Manager.getCouponsPriceColumn(), coupon.getPrice());
            values.put(Db_Manager.getCouponsImageColumn(), coupon.getImage());
            // Insert the values into the database
            long newRowId = db.insert(Db_Manager.getTableNameCoupons(), null, values);
            // Update the couponId in the Coupons object with the value generated by the database
            coupon.setId((int) newRowId);
            db.close();
        }
        catch (Exception e){
            throw new CouponException("Error in adding a coupon! ");
        }
    }



    // a function to Update an existing coupon in the list and in the coupons table
    @Override
    public void updateCoupon(Coupon updatedCoupon) throws CouponException {
        // Find the existing coupon in the ArrayList by its ID
        Coupon existingCoupon = getOneCoupon(updatedCoupon.getId());
        if (existingCoupon != null) {
            try{
                // Update the coupon in the ArrayList
                couponsList.remove(existingCoupon);
                couponsList.add(updatedCoupon);
                // Update the coupon in the database
                SQLiteDatabase db = dbManager.getWritableDatabase();
                ContentValues values = new ContentValues();
                values.put(Db_Manager.getKeyCompanyIdFkColumn(), updatedCoupon.getCompanyId());
                values.put(Db_Manager.getKeyCategoryIdFkColumn(), updatedCoupon.getCategory().ordinal());
                values.put(Db_Manager.getCouponsTitleColumn(), updatedCoupon.getTitle());
                values.put(Db_Manager.getCouponsDescriptionColumn(), updatedCoupon.getDescription());
                values.put(Db_Manager.getCouponsStartDateColumn(), updatedCoupon.getStartDate().getTime());
                values.put(Db_Manager.getCouponsEndDateColumn(), updatedCoupon.getEndDate().getTime());
                values.put(Db_Manager.getCouponsAmountColumn(), updatedCoupon.getAmount());
                values.put(Db_Manager.getCouponsPriceColumn(), updatedCoupon.getPrice());
                values.put(Db_Manager.getCouponsImageColumn(), updatedCoupon.getImage());
                String whereClause = Db_Manager.getCouponsIdColumn() + " = ?";
                String[] whereArgs = {String.valueOf(updatedCoupon.getId())};
                db.update(Db_Manager.getTableNameCoupons(), values, whereClause, whereArgs);
                db.close();}
            catch (Exception e){
                throw new CouponException("Error in Updating the coupon! ");

            }
        }
    }



    // a function to Delete a coupon by its ID
    @Override
    public void deleteCoupon(int couponId) throws CouponException {
        // First, get the coupon from the ArrayList
        Coupon couponToRemove = getOneCoupon(couponId);
        if (couponToRemove != null) {
            // Remove the coupon from the ArrayList
            try {
                couponsList.remove(couponToRemove);
                // delete the coupon from the database
                SQLiteDatabase db = dbManager.getWritableDatabase();
                String whereClause = Db_Manager.getCouponsIdColumn() + " = ?";
                String[] whereArgs = {String.valueOf(couponId)};
                db.delete(Db_Manager.getTableNameCoupons(), whereClause, whereArgs);
                db.close();
            }
            catch (Exception e){
                throw new CouponException("Error when deleting a coupon! ");
            }
        }
    }


    // return a list of all coupons in our table
    @Override
    public ArrayList<Coupon> getAllCoupons() throws CouponException {
        ArrayList<Coupon> coupons = new ArrayList<>();
        String[] fields = {
                Db_Manager.getCouponsIdColumn(),
                Db_Manager.getKeyCompanyIdFkColumn(),
                Db_Manager.getKeyCategoryIdFkColumn(),
                Db_Manager.getCouponsTitleColumn(),
                Db_Manager.getCouponsDescriptionColumn(),
                Db_Manager.getCouponsStartDateColumn(),
                Db_Manager.getCouponsEndDateColumn(),
                Db_Manager.getCouponsAmountColumn(),
                Db_Manager.getCouponsPriceColumn(),
                Db_Manager.getCouponsImageColumn()
        };

        try {
            Cursor cursor = dbManager.getCursor(dbManager.TABLE_COUPONS, fields, null);
            if (cursor.moveToFirst())
                do {
                    Date startDate = new Date(cursor.getLong(5));
                    Date endDate = new Date(cursor.getLong(6));
                    String categoryIdStr = cursor.getString(2); // Assuming the categoryId is in column 2
                    int categoryIdInt = Integer.parseInt(categoryIdStr); // Convert the string to an integer
                    Category category = null;

                    if (categoryIdInt >= 0 && categoryIdInt < Category.values().length) {
                        category = Category.values()[categoryIdInt];
                    }

                    if (category == null) {
                        throw new CouponException("Error getting the desired Category! ");
                    }

                    Coupon couponpos =  new Coupon(cursor.getInt(0), cursor.getInt(1), category, cursor.getString(3), cursor.getString(4), startDate, endDate, cursor.getInt(7), cursor.getDouble(8), cursor.getString(9));
                    coupons.add(couponpos);

                } while (cursor.moveToNext());
            return coupons;
        }catch (Exception e) {
            throw new CouponException("Error retrieving all customer coupons: ");
        }
    }


    // this is a function we added in order to return all coupins with amount>0 !
    //    this is used in to show the customers the coupons that they can buy
    public ArrayList<Coupon> getValidCoupons() throws CouponException {
        ArrayList<Coupon> allCoupons = getAllCoupons();
        ArrayList<Coupon> validCoupons = new ArrayList<>();

        for (Coupon coupon : allCoupons) {
            if (coupon.getAmount() > 0) {
                validCoupons.add(coupon);
            }
        }

        return validCoupons;
    }



    // Retrieve a specific coupon by its ID
    @Override
    public Coupon getOneCoupon(int couponId) throws CouponException {
        if(couponsList==null || couponId<0)
            throw new CouponException("Error getting one coupoun with the given id ");
        for(Coupon coupon:couponsList)
        {
            if(coupon.getId()==couponId)
                return coupon;
        }
        return null;
    }



    // Add a new coupon purchase (to the customers vs coupons table)
    @Override
    public void addCouponPurchase(int customerId, int couponId) throws CouponException {
        try {
            SQLiteDatabase db = dbManager.getWritableDatabase();
            ContentValues values = new ContentValues();
            values.put(Db_Manager.KEY_CUSTOMER_ID_FK, customerId);
            values.put(Db_Manager.KEY_COUPON_ID_FK, couponId);

            // Insert the values into the CUSTOMERS_VS_COUPONS table
            long newRowId = db.insert(Db_Manager.TABLE_CUSTOMERS_VS_COUPONS, null, values);
            db.close();
        }
        catch (Exception e){
            throw new CouponException("Error in adding a coupon purchase! ");
        }
    }



    // Delete a coupon purchase by its ID ( from the customers vs coupons table)
    @Override
    public void deleteCouponPurchase(int customerId, int couponId) throws CouponException {
        try{
            SQLiteDatabase db = dbManager.getWritableDatabase();

            // Define the WHERE clause to identify the specific customer-coupon association
            String whereClause = Db_Manager.KEY_CUSTOMER_ID_FK + " = ? AND " +
                    Db_Manager.KEY_COUPON_ID_FK + " = ?";
            String[] whereArgs = {String.valueOf(customerId), String.valueOf(couponId)};

            // Delete the association from the CUSTOMERS_VS_COUPONS table
            db.delete(Db_Manager.TABLE_CUSTOMERS_VS_COUPONS, whereClause, whereArgs);
            db.close();}
        catch (Exception e){
            throw new CouponException("Error in deleting a coupon purchase! ");
        }

    }



    // function we added to get all the coupons of the given customer
    public ArrayList<Coupon> getCustomerCoupons(Customer customer) throws CouponException {
        int customerId = customer.getId();
        ArrayList<Coupon> customerCoupons = new ArrayList<>();

        try {
            SQLiteDatabase db = dbManager.getReadableDatabase();

            // Define the table and columns to query
            String table = Db_Manager.TABLE_CUSTOMERS_VS_COUPONS;
            String[] columns = {Db_Manager.KEY_COUPON_ID_FK};

            // Define the selection criteria
            String selection = Db_Manager.KEY_CUSTOMER_ID_FK + " = ?";
            String[] selectionArgs = {String.valueOf(customerId)};

            Cursor cursor = db.query(table, columns, selection, selectionArgs, null, null, null);

            if (cursor != null) {
                while (cursor.moveToNext()) {
                    int couponId = cursor.getInt(cursor.getColumnIndexOrThrow(Db_Manager.KEY_COUPON_ID_FK));
                    // Retrieve the coupon details by coupon ID using your existing getOneCoupon method
                    Coupon coupon = getOneCoupon(couponId);
                    if (coupon != null) {
                        customerCoupons.add(coupon);
                    }
                }
                cursor.close();
            }

            db.close();
        }
        catch (Exception e){
            throw new CouponException("Error when getting the given ustomer! coupons ");
        }

        return customerCoupons;
    }



}
